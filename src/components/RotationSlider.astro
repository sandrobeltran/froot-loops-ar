---
interface Props {}

const {} = Astro.props;
---

<div
  id="rotationSlider"
  class="hidden relative gap-2 px-4 py-5 items-center justify-center w-full z-[99999]"
>
  <div class="relative z-10 w-full flex items-center justify-center">
    <p class="absolute left-6 text-[.75rem] font-medium text-zinc-100/50">0°</p>
    <input
      type="range"
      name="rotation"
      id="yRotationInput"
      min="-180"
      max="180"
      value="0"
      step="1"
    />
    <p class="absolute right-6 text-[.75rem] font-medium text-zinc-100/50">
      360°
    </p>
  </div>
</div>

<style>
  input[type="range"] {
    -webkit-appearance: none;
    background: transparent;
    cursor: pointer;
    width: 100%;
  }

  /***** Track Styles *****/
  /***** Chrome, Safari, Opera, and Edge Chromium *****/
  input[type="range"]::-webkit-slider-runnable-track {
    background: #053a5f;
    height: 1.3rem;
    border-radius: 1rem;
  }

  /******** Firefox ********/
  input[type="range"]::-moz-range-track {
    background: #053a5f;
    height: 1rem;
    border-radius: 1rem;
  }

  /***** Thumb Styles *****/
  /***** Chrome, Safari, Opera, and Edge Chromium *****/
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none; /* Override default look */
    appearance: none;
    margin-top: calc(1.3rem / 2 - 2rem / 2); /* Centers thumb on the track */
    background-color: #5cd5eb;
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    box-shadow: -2px -2px 6px #121212 inset;
  }
  input[type="range"]::-moz-range-thumb {
    -webkit-appearance: none; /* Override default look */
    appearance: none;
    margin-top: calc(1.3rem / 2 - 2rem / 2); /* Centers thumb on the track */
    background-color: #5cd5eb;
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    box-shadow: -2px -2px 6px #121212 inset;
  }
</style>

<script>
  let tutorialShowed = false;
  let infoPanelShowed = false;
  let rotationTutorialTime = 8000;
  let fadesDuration = 300;
  let fadeOutDuration = 5000;

  function degToRad(deg: number) {
    return (deg * Math.PI) / 180;
  }

  const scene = document.getElementById("scene");
  const celulaAnimalMarker = document.getElementById(
    "celulaAnimalMarker"
  ) as HTMLElement;
  const rotationSlider = document.getElementById(
    "rotationSlider"
  ) as HTMLElement;

  const yRotationInput = document.getElementById(
    "yRotationInput"
  ) as HTMLInputElement;

  const entity = celulaAnimalMarker.querySelector("a-entity") as any;

  let initialRotation = entity.object3D.rotation;
  let animationState: "IN" | "OUT" | "IDLE" = "IDLE";
  let markerIsActive = true;
  let lastPosition = {
    x: "0",
    y: "0",
    z: "0",
  };

  window.addEventListener("DOMContentLoaded", () => {
    // rotationSlider.style.display = "none";
    /* setInterval(() => {
      celulaAnimalMarker.setAttribute("scale", {
        x: 1,
        y: 1,
        z: 1,
      } as unknown as string);
      console.log(celulaAnimalMarker.getAttribute("scale"));
    }, 100); */
  });

  let hideTimer: ReturnType<typeof setTimeout>;
  let fadeOutTimer: ReturnType<typeof setTimeout>;

  celulaAnimalMarker.addEventListener("markerFound", (e) => {
    if (!infoPanelShowed) {
      document.getElementById("swipable-area")!.parentElement!.classList.add("panel-active");

      infoPanelShowed = true;
    }

    if (!tutorialShowed) {
      console.log("Showing rotationTutorial the first time");
      document.getElementById("rotationTutorial")!.style.display = "flex";
      tutorialShowed = true;

      // hide the tutorial after rotationTutorialTime
      /* let rotationTutorialTimer = setTimeout(() => {
        console.log("Hiding rotationTutorial");
        document.getElementById("rotationTutorial")!.style.display = "none";
        clearTimeout(rotationTutorialTimer);
      }, rotationTutorialTime); */
    }
    //? markerFound is triggered just when the .visible property changes from false to true
    // we need to found a way to detect when marker is recovered
    markerIsActive = true;
    animationState = "IN";
    const target = e.target as HTMLElement;
    window.clearTimeout(hideTimer);
    window.clearTimeout(fadeOutTimer);

    target.setAttribute(
      "animation",
      `property: scale; from: 0 0 0; to: 1 1 1; dur: ${fadesDuration}`
    );

    let inTimer = setTimeout(() => {
      target.removeAttribute("animation");
      clearTimeout(inTimer);
    }, fadeOutDuration);

    rotationSlider.style.display = "flex";
  });

  function reEnableGestures() {
    scene?.setAttribute("gesture-detector", "");
    celulaAnimalMarker.setAttribute("raycaster", "objects: .clickable");
    entity.setAttribute(
      "gesture-handler",
      "minScale: 0.25; maxScale: 10; rotationFactor: 0"
    );
  }

  celulaAnimalMarker.addEventListener("markerLost", (e) => {
    const target = e.target as HTMLElement;
    (target as any).object3D.visible = true;

    if (markerIsActive) {
      lastPosition = {
        x: Number((target as any).object3D.position.x).toFixed(3),
        y: Number((target as any).object3D.position.y).toFixed(3),
        z: Number((target as any).object3D.position.z).toFixed(3),
      };
      animationState = "OUT";
      markerIsActive = false;

      fadeOutTimer = setTimeout(() => {
        let currentX = Number((target as any).object3D.position.x).toFixed(3);
        if (animationState === "OUT" && currentX == lastPosition.x) {
          target.setAttribute(
            "animation",
            `property: scale; from: 1 1 1; to: 0 0 0; dur: ${fadesDuration}`
          );

          let hideTimer = setTimeout(() => {
            animationState = "IDLE";
            rotationSlider.style.display = "none";
            (target as any).object3D.visible = false;

            document.getElementById("rotationTutorial")!.style.display = "none";
            tutorialShowed = false;

            target.removeAttribute("animation");
            window.clearTimeout(hideTimer);
            window.clearTimeout(fadeOutTimer);
          }, fadesDuration);
        } else {
          markerIsActive = true;
          animationState = "IN";
          window.clearTimeout(hideTimer);
          window.clearTimeout(fadeOutTimer);
          //(target as any).object3D.visible = false;
        }
      }, fadeOutDuration);
    }
  });

  yRotationInput.addEventListener("input", (e) => {
    const amount = parseInt((e.target as HTMLInputElement).value);

    const rads = degToRad(amount);
    entity.object3D.rotation.y = degToRad(90) + rads;
    celulaAnimalMarker.setAttribute("scale", {
      x: 1,
      y: 1,
      z: 1,
    } as unknown as string);
    // entity.object3D.scale.set(7, 7, 14);
  });
</script>
