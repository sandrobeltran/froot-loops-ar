---
import { type IAnimation } from "../types/customInterfaces";
import RotationSlider from "./RotationSlider.astro";

interface Props {
  animations: IAnimation[];
  inactive?: boolean;
  title?: string;
}

const { animations } = Astro.props;
const title = Astro.params.title || Astro.props.title;
---

<div id="slidersWrapper" class="w-screen gap-0 fixed z-[9999] bottom-0 left-0">
  <RotationSlider />
  <div
    id="animationsPanel"
    class="w-full flex gap-0 p-4 items-center px-6 bg-gradient-to-b from-tertiary to-secondary z-50 left-0 justify-center"
  >
    <button
      id="prevAnimationBtn"
      class="z-20 absolute left-1 font-bold text-xl text-light"
    >
      <svg
        class="h-10"
        viewBox="0 0 27 27"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="13.3238"
          cy="13.3238"
          r="13.3238"
          transform="matrix(-1 0 0 1 26.6465 0)"
          fill="white"></circle>
        <g filter="url(#filter0_d_406_4631)">
          <path
            d="M16.6535 6.80081L16.6535 19.2922C16.6532 19.4187 16.6215 19.5427 16.5619 19.6508C16.5023 19.7589 16.417 19.8471 16.3153 19.9058C16.2136 19.9646 16.0993 19.9917 15.9846 19.9842C15.8699 19.9767 15.7593 19.9349 15.6646 19.8634L7.47062 13.6177C7.13089 13.3588 7.13089 12.7356 7.47062 12.4761L15.6646 6.23037C15.7591 6.15808 15.8698 6.11568 15.9846 6.10779C16.0995 6.0999 16.2141 6.12682 16.3161 6.18562C16.418 6.24442 16.5033 6.33285 16.5628 6.44131C16.6223 6.54977 16.6537 6.67411 16.6535 6.80081Z"
            fill="#1E2C56"></path>
        </g>
        <defs>
          <filter
            id="filter0_d_406_4631"
            x="3.21582"
            y="4.10645"
            width="17.4375"
            height="21.8789"
            filterUnits="userSpaceOnUse"
            color-interpolation-filters="sRGB"
          >
            <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
            <feColorMatrix
              in="SourceAlpha"
              type="matrix"
              values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
              result="hardAlpha"></feColorMatrix>
            <feOffset dy="2"></feOffset>
            <feGaussianBlur stdDeviation="2"></feGaussianBlur>
            <feComposite in2="hardAlpha" operator="out"></feComposite>
            <feColorMatrix
              type="matrix"
              values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"
            ></feColorMatrix>
            <feBlend
              mode="normal"
              in2="BackgroundImageFix"
              result="effect1_dropShadow_406_4631"></feBlend>
            <feBlend
              mode="normal"
              in="SourceGraphic"
              in2="effect1_dropShadow_406_4631"
              result="shape"></feBlend>
          </filter>
        </defs>
      </svg>
    </button>

    <!-- SLIDER -->
    <div class="w-full overflow-x-hidden">
      <!-- WRAPPER -->
      <div
        id="animationWrapper"
        data-title={title}
        style={{ minWidth: `${animations.length}%` }}
        class="flex transition-transform items-center"
      >
        {
          animations.map((animation) => (
            <div
              data-clip={animation.clip}
              data-loop={animation.loop}
              class="flex-1 flex min-w-full h-full gap-0 items-center"
            >
              {animation.image ? (
                <div class="h-full flex-1">
                  <img
                    src={`/img/animations-panel/${title}/${animation.image}`}
                    alt="Imagen de secciÃ³n"
                    class="h-full"
                  />
                </div>
              ) : null}
              <div
                class="flex-1 h-full flex gap-1 flex-col overflow-y-auto"
                style={
                  !animation.image
                    ? { textAlign: "center", alignItems: "center" }
                    : {}
                }
              >
                <h4 class="text-light leading-tight text-xl font-bold">
                  {animation.label}
                </h4>
                <p class="text-light/80 max-h-28 text-sm max-w-[90%]">
                  {animation.description}
                </p>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <button
      id="nextAnimationBtn"
      class="z-20 absolute right-1 font-bold text-xl text-light"
    >
      <svg
        class="h-10 -scale-x-100"
        viewBox="0 0 27 27"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="13.3238"
          cy="13.3238"
          r="13.3238"
          transform="matrix(-1 0 0 1 26.6465 0)"
          fill="white"></circle>
        <g filter="url(#filter0_d_406_4631)">
          <path
            d="M16.6535 6.80081L16.6535 19.2922C16.6532 19.4187 16.6215 19.5427 16.5619 19.6508C16.5023 19.7589 16.417 19.8471 16.3153 19.9058C16.2136 19.9646 16.0993 19.9917 15.9846 19.9842C15.8699 19.9767 15.7593 19.9349 15.6646 19.8634L7.47062 13.6177C7.13089 13.3588 7.13089 12.7356 7.47062 12.4761L15.6646 6.23037C15.7591 6.15808 15.8698 6.11568 15.9846 6.10779C16.0995 6.0999 16.2141 6.12682 16.3161 6.18562C16.418 6.24442 16.5033 6.33285 16.5628 6.44131C16.6223 6.54977 16.6537 6.67411 16.6535 6.80081Z"
            fill="#1E2C56"></path>
        </g>
        <defs>
          <filter
            id="filter0_d_406_4631"
            x="3.21582"
            y="4.10645"
            width="17.4375"
            height="21.8789"
            filterUnits="userSpaceOnUse"
            color-interpolation-filters="sRGB"
          >
            <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
            <feColorMatrix
              in="SourceAlpha"
              type="matrix"
              values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
              result="hardAlpha"></feColorMatrix>
            <feOffset dy="2"></feOffset>
            <feGaussianBlur stdDeviation="2"></feGaussianBlur>
            <feComposite in2="hardAlpha" operator="out"></feComposite>
            <feColorMatrix
              type="matrix"
              values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"
            ></feColorMatrix>
            <feBlend
              mode="normal"
              in2="BackgroundImageFix"
              result="effect1_dropShadow_406_4631"></feBlend>
            <feBlend
              mode="normal"
              in="SourceGraphic"
              in2="effect1_dropShadow_406_4631"
              result="shape"></feBlend>
          </filter>
        </defs>
      </svg>
    </button>
  </div>
</div>

<script>
  import { fade } from "astro:transitions";

  const nextAnimationBtn = document.getElementById("nextAnimationBtn")!;
  const prevAnimationBtn = document.getElementById("prevAnimationBtn")!;
  const animationWrapper = document.getElementById("animationWrapper")!;
  const animations = Array.from(animationWrapper.querySelectorAll("&>div"));
  const model = document.getElementById("animatedModel");
  let canSlide = true;
  let coolDownTime = 500;
  let animationDuration = 330; // 330
  let animationState: "in" | "out" = "in";

  let index = 0;
  const amountOfAnimations = animationWrapper!.childElementCount;

  function updateWrapperTranslate(index: number) {
    let translate = `translateX(-${index * 100}%)`;

    animationWrapper!.style.transform = translate;

    canSlide = false;
    let timer: ReturnType<typeof setTimeout>;

    timer = setTimeout(() => {
      canSlide = true;
      clearTimeout(timer);
    }, coolDownTime);
  }

  function checkDisplays() {
    if (index >= amountOfAnimations - 1) {
      nextAnimationBtn.style.display = "none";
    } else {
      nextAnimationBtn.style.display = "inline-block";
    }

    if (index <= 0) {
      prevAnimationBtn.style.display = "none";
    } else {
      prevAnimationBtn.style.display = "inline-block";
    }
  }

  function nextAnimationHandler() {
    if (!canSlide) return;
    if (index >= amountOfAnimations - 1) return;

    index++;

    checkDisplays();
    updateWrapperTranslate(index);
    updateAnimationMixer();
  }

  nextAnimationBtn.addEventListener("click", nextAnimationHandler);

  function prevAnimationHandler() {
    if (!canSlide) return;
    if (index <= 0) return;

    index--;

    checkDisplays();
    updateWrapperTranslate(index);
    updateAnimationMixer();
  }

  prevAnimationBtn.addEventListener("click", prevAnimationHandler);

  function resumeAnimation() {
    (model as any).play();

    prevAnimationBtn.removeEventListener("click", resumeAnimation);
    nextAnimationBtn.removeEventListener("click", resumeAnimation);
  }

  const title = animationWrapper.getAttribute("data-title");

  function updateAnimationMixer() {
    const currentAnimation = model!.getAttribute(
      "animation-mixer"
    ) as unknown as {
      clip: string;
      loop: "repeat" | "once" | "pingpong";
    };

    //? harcoding celula eucariota
    // if (index === 0 && title === "celula-eucariota") {
      // model?.setAttribute("rotation", "0 90 45");
    // } else if (index !== 0 && title === "celula-eucariota") {
      // model?.setAttribute("rotation", "0 -90 0");
    // } else {
      // model?.setAttribute("rotation", "0 90 45");
    // }

    console.log(`Exiting ${currentAnimation.clip}`);
    model!.setAttribute(
      "animation-mixer",
      `clip: ${currentAnimation.clip.split(".")[0]}.out; loop: once; clampWhenFinished: true`
    );

    const clip = animations[index].getAttribute("data-clip") || "NoClip";
    const loop = animations[index].getAttribute("data-loop") || "repeat";

    let timer = setTimeout(() => {
      playAnimationClip(clip, loop);
      clearTimeout(timer);
    }, animationDuration);
  }

  function playAnimationClip(clip: string, loop: string) {
    if (index !== 0) {
      console.log(`Entering ${clip}...`);
      model!.setAttribute(
        "animation-mixer",
        `clip: ${clip}.in; loop: once; clampWhenFinished: true`
      );
    }

    let timer = setTimeout(() => {
      console.log(`Staying on ${clip}...`);

      if (index === 0) {
        model!.setAttribute(
          "animation-mixer",
          `clip: ${clip}.rest; loop: repeat`
        );
      } else {
        model!.setAttribute(
          "animation-mixer",
          `clip: ${clip}.idle; loop: repeat`
        );
      }

      clearTimeout(timer);
    }, animationDuration);
  }

  window.addEventListener("DOMContentLoaded", () => {
    checkDisplays();
    updateWrapperTranslate(index);
    updateAnimationMixer();
  });
</script>

<script>
  const slidersWrapper = document.getElementById(
    "slidersWrapper"
  ) as HTMLElement;

  window.addEventListener("DOMContentLoaded", () => {
    const isBrave = (navigator as any).brave;

    if (isBrave && slidersWrapper) {
      slidersWrapper.style.bottom = "0%";
    } else {
      slidersWrapper.style.bottom = "0%";
    }
  });
</script>
