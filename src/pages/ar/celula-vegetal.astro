---
import AnimationsPanel from "../../components/AnimationsPanel.astro";
import Layout from "../../layouts/Layout.astro";
import type { IAnimation } from "../../types/customInterfaces";
import { animationsData } from "../../data/animationsData";
import RotationSlider from "../../components/RotationSlider.astro";

const animations: IAnimation[] = animationsData["celula-vegetal"];
---

<Layout title={"Celula Vegetal"}>
  <main class="h-full bg-primary">
    <section class="h-full relative px-4 pb-4 flex flex-col">
      <img
        src="/ar-bg-leaves.png"
        alt="Fondo de hojas"
        class="absolute z-10 top-0 left-0 w-full h-full pointer-events-none"
      />
      <nav class="relative z-50 flex items-center py-3 justify-start">
        <a
          href="#"
          id="goBackAnchor"
          class="flex gap-0 items-center text-light underline"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-10"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M15.75 19.5 8.25 12l7.5-7.5"></path>
          </svg>
          Volver
        </a>
      </nav>
      <div
        class="overflow-hidden relative block w-full h-[calc(100%-16px)] bg-light"
      >
        <a-scene
          vr-mode-ui="enabled: false;"
          loading-screen="enabled: false;"
          renderer="logarithmicDepthBuffer: true;"
          arjs="trackingMethod: best; sourceType: webcam; debugUIEnabled: false;sourceWidth:1280; sourceHeight:960; displayWidth: 1280; displayHeight: 960; patternRatio: 0.8"
          id="scene"
          embedded
          gesture-detector
        >
          <a-assets>
            <a-asset-item
              id="celula-animal"
              src=`/assets/celula-vegetal/model.glb`></a-asset-item>
          </a-assets>
          <a-camera
            scale="1 1 1"
            position="0 0 0"
            look-controls="enabled: false"
          >
          </a-camera>

          <!--  <a-entity id="rig" position="0 0 0">
            <a-camera id="camera"></a-camera>
          </a-entity> -->

          <a-marker
            id="celulaAnimalMarker"
            type="pattern"
            preset="custom"
            url="/assets/celula-animal/marker.patt"
            emitevents="true"
            smooth="true"
            scale="0 0 0"
            smoothCount="10"
            smoothTolerance=".01"
            smoothThreshold="5"
            raycaster="objects: .clickable"
            cursor="fuse: false; rayOrigin: mouse;"
            visible
          >
            <a-entity
              id="animatedModel"
              position="0 0.5 -0.1"
              rotation="0 -90 0"
              scale="10 10 10"
              animation-mixer="clip: Celula.rest; timeScale: 1"
              gltf-model="#celula-animal"
              class="clickable"
              gesture-handler="minScale: 0.25; maxScale: 10; rotationFactor: 0"
            ></a-entity>
          </a-marker>
        </a-scene>
      </div>
      <AnimationsPanel title="celula-vegetal" animations={animations} />
    </section>
  </main>
</Layout>

<!-- rotation = 0 90 0 -->

<script type="text/javascript" is:inline>
  function waitForElm(selector) {
    console.log(`Waiting for ${selector}`);
    return new Promise((resolve) => {
      if (document.querySelector(selector)) {
        return resolve(document.querySelector(selector));
      }

      const observer = new MutationObserver((mutations) => {
        if (document.querySelector(selector)) {
          observer.disconnect();
          resolve(document.querySelector(selector));
        }
      });

      // If you get "parameter 1 is not of type 'Node'" error, see https://stackoverflow.com/a/77855838/492336
      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    });
  }

  const goBackAnchor = document.getElementById("goBackAnchor");

  const urlSearchParams = new URLSearchParams(window.location.search);
  const params = Object.fromEntries(urlSearchParams.entries());

  goBackAnchor.href = params["cb_url"] || "#";

  window.addEventListener("DOMContentLoaded", async () => {
    const video = await waitForElm("#arjs-video");
    const scene = document.querySelector("a-scene");
    const canvas = await waitForElm(".a-canvas");

    video.style.display = "unset !important";
    video.style.width = `${scene.clientWidth}px !important`;
    video.style.height = `${scene.clientHeight}px !important`;

    // scene.style.width = `${scene.clientHeight}px`;
    canvas.style.width = `${scene.clientHeight}px`;
    // scene.style.right = `${scene.clientHeight / 2}px`;

    scene.appendChild(video);
  });
</script>

<script is:inline>
  const sceneEl = document.getElementById("scene");
  let isMarkerVisible = false;

  sceneEl.addEventListener("markerFound", (e) => {
    isMarkerVisible = true;
  });

  sceneEl.addEventListener("markerLost", (e) => {
    isMarkerVisible = false;
  });
  sceneEl.addEventListener("onefingermove", handleRotation);
  sceneEl.addEventListener("twofingermove", handleScale);

  function handleRotation(event) {
    console.log(event);
    if (isMarkerVisible) {
      el.object3D.rotation.y += event.detail.positionChange.x * rotationFactor;

      el.object3D.rotation.x += event.detail.positionChange.y * rotationFactor;
    }
  }
  function handleScale(event) {
    if (isMarkerVisible) {
      this.scaleFactor *=
        1 + event.detail.spreadChange / event.detail.startSpread;

      this.scaleFactor = Math.min(
        Math.max(this.scaleFactor, this.data.minScale),
        this.data.maxScale
      );

      el.object3D.scale.x = scaleFactor * initialScale.x;
      el.object3D.scale.y = scaleFactor * initialScale.y;
      el.object3D.scale.z = scaleFactor * initialScale.z;
    }
  }
</script>

<style is:inline>
  a-scene {
    width: 100vw !important;
    height: 100vh !important;
    /* right: 50% !important; */
    /* aspect-ratio: 1/ 1 !important; */
  }

  .a-canvas {
    height: 100% !important;
    left: unset !important;
    right: -50% !important;
    /* margin: auto; */
    /* transform: translateX(-50%) !important; */
    aspect-ratio: 1 / 1 !important;
    z-index: 50 !important;
  }

  #arjs-video {
    display: inline-block !important;
    width: 100% !important;
    height: 100% !important;
    position: relative !important;
    z-index: 1 !important;
    margin: 0 !important;
    object-fit: cover !important;
    aspect-ratio: 1/1 !important;
  }
</style>
